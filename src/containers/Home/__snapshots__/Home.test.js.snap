// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Home /> should match with snapshot 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <article
        class="container home"
      >
        <section
          class="home__desc"
        >
          <h1>
            Hello ðŸ‘‹ 
          </h1>
          <h3>
             I provided three solution for this challenge!
          </h3>
          <p>
            You can choose each of them from navigation bar to check them how they work.
          </p>
          <ol>
            <li>
              First way is a simple modulo kind of checking number in an O(n) solution. It is not performant as much, and you might get your chrome tab crashed for large entries like numbers more than 1 bilion.
            </li>
            <li>
              In second solution I am using a web worker to handle the large amount of computation in another thread. I can say that it's a bit more performant, and at least the UI is not locking and it becomes interactable.
            </li>
            <li>
              Third way is the algorithmic and mathmatical thinking way that I've implemented. which is the best solution that I could came up with!
            </li>
          </ol>
        </section>
      </article>
    </div>
  </body>,
  "container": <div>
    <article
      class="container home"
    >
      <section
        class="home__desc"
      >
        <h1>
          Hello ðŸ‘‹ 
        </h1>
        <h3>
           I provided three solution for this challenge!
        </h3>
        <p>
          You can choose each of them from navigation bar to check them how they work.
        </p>
        <ol>
          <li>
            First way is a simple modulo kind of checking number in an O(n) solution. It is not performant as much, and you might get your chrome tab crashed for large entries like numbers more than 1 bilion.
          </li>
          <li>
            In second solution I am using a web worker to handle the large amount of computation in another thread. I can say that it's a bit more performant, and at least the UI is not locking and it becomes interactable.
          </li>
          <li>
            Third way is the algorithmic and mathmatical thinking way that I've implemented. which is the best solution that I could came up with!
          </li>
        </ol>
      </section>
    </article>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
